let Storage,gql,path;_dde‍.x([["Query",()=>Query],["Mutation",()=>Mutation],["typedefs",()=>typedefs]]);_dde‍.w("@google-cloud/storage",[["Storage",["Storage"],function(v){Storage=v}]]);_dde‍.w("apollo-server-express",[["gql",["gql"],function(v){gql=v}]]);_dde‍.w("path",[["default",["path"],function(v){path=v}]]);



let Data = [];

       const Query = {
  getUser: () => {
    return Data;
  },
};

const removeWhiteSpaces = (name) => {
  let newName = name.replace(/\s+/g, "");

  return newName;
};

       const Mutation = {
  createUser: async (_, { username, image }) => {
    const bucketName = "node-graphql-application"; // our GCS bucket name, should be in kept in our .env file

    const storage = new Storage({
      keyFilename: path.join(__dirname, "../remotify-secret-key.json"),
    });

    await image.then(async ({ filename, createReadStream }, res) => {
      let sanitizedName = removeWhiteSpaces(filename);

      await new Promise((resolve, reject) => {
        createReadStream().pipe(
          storage
            .bucket(bucketName)
            .file(sanitizedName)
            .createWriteStream()
            .on("finish", () => {
              storage
                .bucket(bucketName)
                .file(sanitizedName)
                .makePublic()
                .then(() => {
                  //empties the db-storage-like array :)
                  Data = [];
                  // pushes a new data into the db-storage-like array :)
                  Data.push({
                    id: Math.ceil(Math.random() * 100),
                    username: username,
                    imageuri: `https://storage.googleapis.com/node-graphql-application/${sanitizedName}`,
                  });

                  resolve();
                })
                .catch((e) => {
                  reject((e) => console.log(`exec error : ${e}`));
                });
            })
        );
      });
    });
  },

  deleteUser: (_, {}) => {
    Data = [];

    if (Data.length < 1) {
      return true;
    } else {
      return false;
    }
  },
};

       const typedefs = `
  type File {
    filename: String!
    mimetype: String!
    encoding: String!
  }

  type User {
    id: Int
    username: String
    imageuri: String
    image: File
  }

  type Query {
    getUser: [User]
  }

  type Mutation {
    createUser(username: String!, image: Upload!): User

    deleteUser: Boolean
  }
`;
