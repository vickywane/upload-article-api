let express,ApolloServer,Query,Mutation;_83d‍.w("express",[["default",["express"],function(v){express=v}]]);_83d‍.w("apollo-server-express",[["ApolloServer",["ApolloServer"],function(v){ApolloServer=v}]]);_83d‍.w("./schema/resolvers",[["Query",["Query"],function(v){Query=v}],["Mutation",["Mutation"],function(v){Mutation=v}]]);



const typeDefs = `
type File {
  filename: String!
  mimetype: String!
  encoding: String!
}

type User {
  id: Int
  username: String
  imageuri: String
  image: File
}

type Query {
  getUser: [User]
}

type Mutation {
  createUser(username: String!, image: Upload!): User

  deleteUser: Boolean
}
`;

// The resolvers
const resolvers = {
  Query: Query,
  Mutation: Mutation,
};

// Put together a schema
const server = new ApolloServer({
  typeDefs,
  resolvers,
});

// Initialize the app
const app = express();
const route = "graphql";

server.applyMiddleware({ app, route });
const PORT  = process.env || 3000

// Start the server
app.listen(PORT, () => {
  console.log(`Run queries at http://localhost:${PORT}/graphql!`);
});
